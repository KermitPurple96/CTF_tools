#!/usr/bin/python3

import argparse
import subprocess
import os
import shutil
import sys
import platform


# linux privesc


def download_linenum():
    url = "https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh"
    output_file = "LinEnum.sh"
    
    try:
        # Ejecutar el comando wget para descargar el archivo
        subprocess.run(["wget", url, "-O", output_file], check=True)
        print(f"Downloaded {output_file} successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during download: {e}")


def download_linuxprivchecker():
    url = "https://raw.githubusercontent.com/sleventyeleven/linuxprivchecker/master/linuxprivchecker.py"
    output_file = "linuxprivchecker.py"
    
    try:
        # Ejecutar el comando wget para descargar el archivo
        subprocess.run(["wget", url, "-O", output_file], check=True)
        print(f"Downloaded {output_file} successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during download: {e}")



def download_linux_exploit_suggester():

    subprocess.run(["wget", "https://raw.githubusercontent.com/The-Z-Labs/linux-exploit-suggester/refs/heads/master/linux-exploit-suggester.sh"], check=True)



def download_linux_exploit_suggester2():
    url = "https://raw.githubusercontent.com/jondonas/linux-exploit-suggester-2/master/linux-exploit-suggester-2.pl"
    output_file = "linux-exploit-suggester-2.pl"
    
    try:
        # Ejecutar el comando wget para descargar el archivo
        subprocess.run(["wget", url, "-O", output_file], check=True)
        print(f"Downloaded {output_file} successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during download: {e}")


def download_lse():
    subprocess.run(["wget","https://github.com/diego-treitos/linux-smart-enumeration/releases/latest/download/lse.sh"], check=True)

def download_bashark():
    subprocess.run(["wget","https://raw.githubusercontent.com/redcode-labs/Bashark/refs/heads/master/bashark.sh" ], check=True)


def download_private():
    subprocess.run(["wget","https://raw.githubusercontent.com/rtcrowley/linux-private-i/refs/heads/master/private-i.sh"], check=True)

def download_htbenum():
    subprocess.run(["wget","https://raw.githubusercontent.com/SolomonSklash/htbenum/refs/heads/master/htbenum.sh"], check=True)

    
# postexploitation


def download_kekeo():
    subprocess.run(["wget", "https://github.com/gentilkiwi/kekeo/releases/download/2.2.0-20211214/kekeo.zip"], check=True)
    subprocess.run(["unzip", "kekeo.zip"], check=True)

def download_lazagne():
    subprocess.run(["wget", "https://github.com/AlessandroZ/LaZagne/releases/download/v2.4.5/LaZagne.exe"], check=True)

def download_mimikatz(arch):
    url = "https://github.com/gentilkiwi/mimikatz/releases/download/2.2.0-20220919/mimikatz_trunk.zip"
    
    try:
        # Descargar el archivo
        subprocess.run(["wget", url, "-O", "mimikatz_trunk.zip"], check=True)
        
        # Descomprimir el archivo zip
        subprocess.run(["unzip", "mimikatz_trunk.zip"], check=True)
        
        # Eliminar el directorio correspondiente según la arquitectura
        if arch == "x64":
            shutil.rmtree("./Win32", ignore_errors=True)
        elif arch == "x86":
            shutil.rmtree("./x64", ignore_errors=True)
        
        # Copiar el ejecutable a la raíz del directorio
        if arch == "x64":
            shutil.copy("./x64/mimikatz.exe", "mimikatz.exe")
        elif arch == "x86":
            shutil.copy("./x86/mimikatz.exe", "mimikatz.exe")
        
        # Eliminar el archivo zip y el directorio temporal
        os.remove("./mimikatz_trunk.zip")
        #os.remove("./kiwi_passwords.yar")
        #os.remove("./mimicom.idl")
        os.remove("./README.md")
        print("Mimikatz downloaded and extracted successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during download or extraction: {e}")
    except FileNotFoundError as e:
        print(f"File not found error: {e}")


# Pivoting


def download_ligolo(platform, arch):
    
    if platform == "windows":
        subprocess.run(["wget", "https://github.com/nicocha30/ligolo-ng/releases/download/v0.7.1-alpha/ligolo-ng_proxy_0.7.1-alpha_windows_amd64.zip"], check=True)
        subprocess.run(["wget", "https://github.com/nicocha30/ligolo-ng/releases/download/v0.7.1-alpha/ligolo-ng_agent_0.7.1-alpha_windows_amd64.zip"], check=True)

    elif platform == "linux":
        subprocess.run(["wget", "https://github.com/nicocha30/ligolo-ng/releases/download/v0.7.1-alpha/ligolo-ng_proxy_0.7.1-alpha_linux_amd64.tar.gz"], check=True)
        subprocess.run(["wget", "https://github.com/nicocha30/ligolo-ng/releases/download/v0.7.1-alpha/ligolo-ng_agent_0.7.1-alpha_linux_amd64.tar.gz"], check=True)

def download_chisel(platform, arch):
    
    if platform == "windows":
        subprocess.run(["wget", "https://github.com/jpillora/chisel/releases/download/v1.10.0/chisel_1.10.0_windows_amd64.gz"], check=True)
        subprocess.run(["gunzip", "chisel_1.10.0_windows_amd64.gz"], check=True)

    elif platform == "linux":
        if arch == "x86":
            subprocess.run(["wget", "https://github.com/jpillora/chisel/releases/download/v1.10.0/chisel_1.10.0_linux_386.gz"], check=True)
            subprocess.run(["gunzip", "chisel_1.10.0_linux_386.gz"], check=True)

        elif arch == "x64":
            subprocess.run(["wget", "https://github.com/jpillora/chisel/releases/download/v1.10.0/chisel_1.10.0_linux_amd64.gz"], check=True)
            subprocess.run(["gunzip", "chisel_1.10.0_linux_amd64.gz"], check=True)

        else:
            print("Unsupported platform specified.")
            return

def download_socat(platform, arch):
    if platform == "windows":
        if arch == "x86":
            url = "https://sourceforge.net/projects/unix-utils/files/socat/1.7.3.2/socat-1.7.3.2-1-i686.zip/download"
            output_file = "socat-1.7.3.2-1-i686.zip"
        elif arch == "x64":
            url = "https://sourceforge.net/projects/unix-utils/files/socat/1.7.3.2/socat-1.7.3.2-1-x86_64.zip/download"
            output_file = "socat-1.7.3.2-1-x86_64.zip"
        else:
            print("Unsupported architecture specified for Linux.")
            return
    elif platform == "linux":
        if arch == "x64":
            url = "https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat"
            output_file = "socat"
        else:
            print("Unsupported architecture specified for Windows.")
            return
    else:
        print("Unsupported platform specified.")
        return

    try:
        # Descargar el archivo usando wget
        subprocess.run(["wget", url, "-O", output_file], check=True)
        print(f"Downloaded {output_file} successfully.")
        
        # Si el archivo es un zip, descomprimirlo
        if output_file.endswith(".zip"):
            subprocess.run(["unzip", output_file], check=True)
            print(f"Extracted {output_file} successfully.")
            
            # Borrar el archivo zip después de la extracción
            os.remove(output_file)
            print(f"Deleted {output_file} successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during download or extraction: {e}")


# windows privesc


def download_sharpup():
    subprocess.run(["wget", "https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/SharpUp.exe"], check=True)

def download_rubeus():
    subprocess.run(["wget", "https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/Rubeus.exe"], check=True)

def download_windows_exploit_suggester():
    url = "https://raw.githubusercontent.com/AonCyberLabs/Windows-Exploit-Suggester/master/windows-exploit-suggester.py"
    output_file = "windows-exploit-suggester.py"
    
    try:
        # Ejecutar el comando wget para descargar el archivo
        subprocess.run(["wget", url, "-O", output_file], check=True)
        print(f"Downloaded {output_file} successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during download: {e}")      


def download_seatbelt():
    subprocess.run(["wget", "https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/Seatbelt.exe"], check=True)

def download_jaws_enum():
    subprocess.run(["wget", "https://raw.githubusercontent.com/411Hall/JAWS/master/jaws-enum.ps1"], check=True)

def download_powerless():
    subprocess.run(["wget", "https://raw.githubusercontent.com/gladiatx0r/Powerless/master/Powerless.bat"], check=True)

def download_sherlock():
    subprocess.run(["wget", "https://raw.githubusercontent.com/rasta-mouse/Sherlock/master/Sherlock.ps1"], check=True)

def download_moriarty():
    subprocess.run(["wget", "https://github.com/BC-SECURITY/Moriarty/releases/download/1.2/Moriarty.exe"], check=True)


def download_privesccheck():
    subprocess.run(["wget", "https://raw.githubusercontent.com/itm4n/PrivescCheck/master/PrivescCheck.ps1"], check=True)

def download_powerup():
    subprocess.run(["wget", "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1"], check=True)

def download_peas(platform, arch):
    
    if platform == "windows":
        subprocess.run(["wget", "https://github.com/peass-ng/PEASS-ng/releases/download/20240818-ea81ae32/winPEASany.exe"], check=True)
        if arch == "x64":
            subprocess.run(["wget", "https://github.com/peass-ng/PEASS-ng/releases/download/20240818-ea81ae32/winPEASx64.exe"], check=True)
        elif arch == "x86":
            subprocess.run(["wget", "https://github.com/peass-ng/PEASS-ng/releases/download/20240818-ea81ae32/winPEASx86.exe"], check=True)


    elif platform == "linux":
        subprocess.run(["wget", "https://github.com/peass-ng/PEASS-ng/releases/download/20240818-ea81ae32/linpeas.sh"], check=True)
        if arch == "x86":
            subprocess.run(["wget", "https://github.com/peass-ng/PEASS-ng/releases/download/20240818-ea81ae32/linpeas_linux_386"], check=True)

        elif arch == "x64":
            subprocess.run(["wget", "https://github.com/peass-ng/PEASS-ng/releases/download/20240818-ea81ae32/linpeas_linux_amd64"], check=True)

        else:
            print("Unsupported platform specified.")
            return



# ADCS


def download_pkinit():
    subprocess.run(["git", "clone", "https://github.com/dirkjanm/PKINITtools"], check=True)


def download_certify():
    subprocess.run(["wget", "https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/Certify.exe"], check=True)

def download_certipy():
    subprocess.run(["wget", "wget https://github.com/ly4k/Certipy/archive/refs/tags/4.8.2.zip"], check=True)
    subprocess.run(["unzip", "4.8.2.zip"], check=True)


def download_poshadcs():
    subprocess.run(["wget", "https://raw.githubusercontent.com/cfalta/PoshADCS/master/ADCS.ps1"], check=True)

def download_adcspwn():
    subprocess.run(["wget", "https://github.com/bats3c/ADCSPwn/releases/download/ADCSPwn/ADCSPwn.exe"], check=True)

def download_adcskiller():
    subprocess.run(["git", "clone", "https://github.com/grimlockx/ADCSKiller"], check=True)



# Windows


def download_runascs():
    subprocess.run(["wget", "https://github.com/antonioCoco/RunasCs/releases/download/v1.5/RunasCs.zip"], check=True)
    subprocess.run(["unzip", "RunasCs.zip"], check=True)


def download_runasps1():
    subprocess.run(["wget", "https://raw.githubusercontent.com/antonioCoco/RunasCs/master/Invoke-RunasCs.ps1"], check=True)


def download_sharpwmi():
    subprocess.run(["wget", "https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/SharpWMI.exe"], check=True)


def download_maz_windows_binaries():
    subprocess.run(["wget", "https://github.com/maaaaz/impacket-examples-windows/releases/download/v0.9.17/impacket-examples-windows-v0.9.17.zip"], check=True)
    subprocess.run(["unzip", "impacket-examples-windows-v0.9.17.zip"], check=True)
    subprocess.run(["rm", "impacket-examples-windows-v0.9.17.zip"], check=True)

def download_sysinternals():
    subprocess.run(["wget", "https://download.sysinternals.com/files/SysinternalsSuite.zip"], check=True)
    subprocess.run(["unzip", "SysinternalsSuite.zip", "-d", "sysinternals"], check=True)
    subprocess.run(["rm", "SysinternalsSuite.zip"], check=True)

def download_sharpcollection():
    subprocess.run(["git", "clone", "https://github.com/Flangvik/SharpCollection"], check=True)

def download_nc_exe():
    subprocess.run(["wget", "https://eternallybored.org/misc/netcat/netcat-win32-1.12.zip"], check=True)
    subprocess.run(["unzip", "netcat-win32-1.12.zip"], check=True)
    subprocess.run(["rm", "netcat-win32-1.12.zip"], check=True)

def download_invoke_psexec():
    subprocess.run(["wget", "https://raw.githubusercontent.com/HarmJ0y/Misc-PowerShell/master/Invoke-PsExec.ps1"], check=True)

def download_invoke_conptyshell():
    subprocess.run(["wget", "https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1"], check=True)

def download_conptyshell_exe():
    subprocess.run(["wget", "https://github.com/antonioCoco/ConPtyShell/releases/download/1.5/ConPtyShell.zip"], check=True)
    subprocess.run(["unzip", "ConPtyShell.zip"], check=True)
    subprocess.run(["rm", "ConPtyShell.zip"], check=True)

def download_powercat():
    subprocess.run(["wget", "https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1"], check=True)

def download_nishang():
    subprocess.run(["git", "clone", "https://github.com/samratashok/nishang"], check=True)

def download_invoke_thehash():
    subprocess.run(["git", "clone", "https://github.com/Kevin-Robertson/Invoke-TheHash"], check=True)



# AD recon



def download_rpcenum():
    url = "https://raw.githubusercontent.com/KermitPurple96/rpcenum/master/rpcenum.sh"
    output_file = "rpcenum.sh"
    
    try:
        # Ejecutar el comando wget para descargar el archivo
        subprocess.run(["wget", url, "-O", output_file], check=True)
        print(f"Downloaded {output_file} successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during download: {e}")

def download_pywerview():
    url = "https://github.com/the-useless-one/pywerview/archive/refs/tags/v0.6.zip"
    output_file = "pywerview_v0.6.zip"
    
    try:
        # Ejecutar el comando wget para descargar el archivo
        subprocess.run(["wget", url, "-O", output_file], check=True)
        subprocess.run(["unzip", output_file], check=True)
        subprocess.run(["rm", output_file], check=True)

        print(f"Downloaded {output_file} successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during download: {e}")

def download_adpeas():
    subprocess.run(["wget", "https://raw.githubusercontent.com/61106960/adPEAS/main/adPEAS.ps1"], check=True)

def download_adpeas_light():
    subprocess.run(["wget", "https://raw.githubusercontent.com/61106960/adPEAS/main/adPEAS-Light.ps1"], check=True)

def download_sharpview():
    subprocess.run(["wget", "https://github.com/tevora-threat/SharpView/blob/master/Compiled/SharpView.exe"], check=True)

def download_powerview():
    subprocess.run(["wget", "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1"], check=True)

def download_sharphound():
    subprocess.run(["wget", "https://github.com/BloodHoundAD/SharpHound/releases/download/v2.5.1/SharpHound-v2.5.1.zip"], check=True)
    subprocess.run(["unzip", "SharpHound-v2.5.1.zip"], check=True)


def download_dnstools():

    subprocess.run(["pip", "install", "git+https://github.com/dirkjanm/adidnsdump#egg=adidnsdump"], check=True)
    subprocess.run(["wget", "https://raw.githubusercontent.com/dirkjanm/krbrelayx/master/addspn.py"], check=True)
    subprocess.run(["wget", "https://raw.githubusercontent.com/dirkjanm/krbrelayx/master/dnstool.py"], check=True)
    subprocess.run(["wget", "https://raw.githubusercontent.com/dirkjanm/krbrelayx/master/krbrelayx.py"], check=True)
    subprocess.run(["wget", "https://raw.githubusercontent.com/dirkjanm/krbrelayx/master/printerbug.py"], check=True)



# AD



def download_standin():
    subprocess.run(["wget","wget https://github.com/FuzzySecurity/StandIn/releases/download/v1.3/StandIn_v13_Net35_45.zip"], check=True)
    subprocess.run(["wget","unzip StandIn_v13_Net35_45.zip"], check=True)

 

def download_sprying():

    subprocess.run(["git", "clone", "https://github.com/cube0x0/HashSpray.py"], check=True)
    subprocess.run(["git", "clone", "https://github.com/Hackndo/sprayhound"], check=True)

def download_domain_password_spray():
    subprocess.run(["wget", "https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/master/DomainPasswordSpray.ps1"], check=True)


def download_powersharppack():
    subprocess.run(["wget", "https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpPack.ps1"], check=True)

def download_powerupsql():
    subprocess.run(["wget", "https://raw.githubusercontent.com/NetSPI/PowerUpSQL/master/PowerUpSQL.ps1"], check=True)


def download_kerbrute(platform, arch):

    if platform == "linux":
        if arch == "x86": 
            url = "https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_linux_386" 
        else:
            url = "https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_linux_amd64"
    
    elif platform == "windows":
        if arch == "x86":
            url = "https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe" 
        else:
            url = "https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_amd64.exe"
    
    else:
        print("Unsupported platform specified.")
        return

    try:
        #os.makedirs("kerbrute", exist_ok=True)
        filename = os.path.basename(url)
        subprocess.run(["wget", url, "-O", filename], check=True)
        if platform == "linux":
            subprocess.run(["chmod", "+x", filename], check=True)
        print(f"Kerbrute for {platform} {arch} downloaded successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during download: {e}")


def download_impacket(platform, arch):
    if platform == "linux":
        url = "https://github.com/ropnop/impacket_static_binaries/releases/download/0.9.22.dev-binaries/impacket_linux_binaries.tar.gz"
    elif platform == "windows":
        url = "https://github.com/ropnop/impacket_static_binaries/releases/download/0.9.22.dev-binaries/impacket_windows_binaries.zip"
    else:
        print("Unsupported platform specified.")
        return

    try:
        subprocess.run(["wget", url], check=True)
        if platform == "linux":
            subprocess.run(["mkdir", "-p", "impacket"], check=True)
            subprocess.run(["tar", "-xf", "impacket_linux_binaries.tar.gz", "-C", "impacket"], check=True)
            subprocess.run(["rm", "impacket_linux_binaries.tar.gz"], check=True)
        elif platform == "windows":
            subprocess.run(["unzip", "impacket_windows_binaries.zip"], check=True)
            subprocess.run(["mv", "dist", "impacket_ropnop"], check=True)
            subprocess.run(["rm", "impacket_windows_binaries.zip"], check=True)
        print(f"Impacket for {platform} downloaded and extracted successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during download or extraction: {e}")



# SCCM


def download_powersccm():
    subprocess.run(["wget", "https://raw.githubusercontent.com/PowerShellMafia/PowerSCCM/master/PowerSCCM.ps1"], check=True)

def download_sharpsccm():
    subprocess.run(["wget", "https://github.com/Mayyhem/SharpSCCM/releases/download/main/SharpSCCM.exe"], check=True)

def sccm_hunter():
    subprocess.run(["wget", "https://github.com/garrettfoster13/sccmhunter/archive/refs/tags/v.1.0.5.zip"], check=True)
    subprocess.run(["unzip", "v.1.0.5.zip"], check=True)
    subprocess.run(["rm", "v.1.0.5.zip"], check=True)


# GROUPS

def adcs():
    download_certipy()
    download_certify()
    download_poshadcs()
    download_adcspwn()
    download_adcskiller()


def sccm():
    download_powersccm()
    download_sharpsccm()
    sccm_hunter()


def windows(platform, arch):

    download_runascs()
    download_runasps1()
    download_sharpwmi()
    download_maz_windows_binaries()
    download_sysinternals()
    download_sharpcollection()
    download_nc_exe()
    download_invoke_psexec()
    download_invoke_conptyshell()
    download_conptyshell_exe()
    download_powercat()
    download_nishang()
    download_invoke_thehash()

def adrecon(platform, arch):

    download_rpcenum()
    download_pywerview()
    download_adpeas()
    download_adpeas_light()
    download_sharpview()
    download_powerview()
    download_sharphound()
    download_dnstools()

def ad(platform, arch):
    download_standin()
    download_sprying()
    download_domain_password_spray()
    download_powersharppack()
    download_powerupsql()
    download_kerbrute(platform, arch)
    download_impacket(platform, arch)


def privesc(platform, arch):

    download_peas(platform, arch)

    if platform == "windows":
        
        download_sharpup()
        download_seatbelt()
        download_windows_exploit_suggester()
        download_jaws_enum()
        download_powerless()
        download_sherlock()
        download_moriarty()
        download_privesccheck()
        download_powerup()

    elif platform == "linux":

        download_linenum()
        download_linuxprivchecker()
        download_linux_exploit_suggester()
        download_linux_exploit_suggester2()
        download_lse()
        download_bashark()
        download_private()
        download_htbenum()
        
    
def pivoting(platform, arch):
    download_ligolo(platform,arch)
    download_socat(platform,arch)
    download_chisel(platform,arch)


def postexploitation(platform, arch):
    download_kekeo()
    download_mimikatz(arch)
    download_rubeus()


# Help


# Definición de listas de herramientas
funciones_adcs = [
    "download_certipy",
    "download_certify",
    "download_poshadcs",
    "download_adcspwn",
    "download_adcskiller"
]

funciones_sccm = [
    "download_powersccm",
    "download_sharpsccm",
    "sccm_hunter"
]

funciones_windows = [
    "download_runascs",
    "download_runasps1",
    "download_sharpwmi",
    "download_maz_windows_binaries",
    "download_sysinternals",
    "download_sharpcollection",
    "download_nc_exe",
    "download_invoke_psexec",
    "download_invoke_conptyshell",
    "download_conptyshell_exe",
    "download_powercat",
    "download_nishang",
    "download_invoke_thehash"
]

funciones_adrecon = [
    "download_rpcenum",
    "download_pywerview",
    "download_adpeas",
    "download_adpeas_light",
    "download_sharpview",
    "download_powerview",
    "download_sharphound",
    "download_dnstools"
]

funciones_ad = [
    "download_standin",
    "download_sprying",
    "download_domain_password_spray",
    "download_powersharppack",
    "download_powerupsql",
    "download_kerbrute",
    "download_impacket"
]


funciones_privesc_windows = [
    "download_sharpup",
    "download_seatbelt",
    "download_windows_exploit_suggester",
    "download_jaws_enum",
    "download_powerless",
    "download_sherlock",
    "download_moriarty",
    "download_privesccheck",
    "download_powerup"
]

funciones_privesc_linux = [
    "download_linenum",
    "download_linuxprivchecker",
    "download_linux_exploit_suggester",
    "download_linux_exploit_suggester2",
    "download_lse",
    "download_bashark",
    "download_private",
    "download_htbenum"
]

funciones_pivoting = [
    "download_ligolo",
    "download_socat",
    "download_chisel"
]

funciones_postexploitation = [
    "download_kekeo",
    "download_mimikatz",
    "download_rubeus"
]


# Diccionario de funciones
funciones = {
    "adcs": funciones_adcs,
    "sccm": funciones_sccm,
    "windows": funciones_windows,
    "adrecon": funciones_adrecon,
    "ad": funciones_ad,
    "privescwin": funciones_privesc_windows,
    "privesclin": funciones_privesc_linux,
    "pivoting": funciones_pivoting,
    "post": funciones_postexploitation
}

# Función para mostrar ayuda en base a los parámetros -h y -h <categoria>
def mostrar_ayuda(categoria=None):
    if categoria is None:
        print("Categorías disponibles:")
        for cat in funciones.keys():
            print(f"- {cat}")
    elif categoria in funciones:
        herramientas = funciones[categoria]
        print(f"Herramientas en la categoría '{categoria}':")
        for herramienta in herramientas:
            print(f"  - {herramienta}")
    else:
        print(f"Categoría '{categoria}' no encontrada.")




# Crear el parser de argumentos
parser = argparse.ArgumentParser(
    description="Download various tools.",
    epilog=(

        f"Ejemplos de uso2:\n"
        "Show categories:\n"
        "\tpython toolpy -t\n"
        "Tools of a category:\n"
        "\ttoolpy -t adcs"
        "Download tool:\n"
        "\ttoolpy -d nombre_de_la_herramienta\n"
        "Download an entire category:\n"
        "\ttoolpy -d nombre_de_la_herramienta\n"
        "System (Windows or Linux):\n"
        "\ttoolpy -d tool -s windows\n"
        "Architecture (x86 o x64):\n"
        "\ttoolpy -d name -a x64\n"

    )
)



#def examples():
#    print(
#        f"Ejemplos de uso:\n"
#        "Show categories:\n"
#        "\tpython toolpy -t\n"
#        "Tools of a category:\n"
#        "\ttoolpy -t adcs"
#        "Download tool:\n"
#        "\ttoolpy -d nombre_de_la_herramienta\n"
#        "Download an entire category:\n"
#        "\ttoolpy -d nombre_de_la_herramienta\n"
#        "System (Windows or Linux):\n"
#        "\ttoolpy -d tool -s windows\n"
#        "Architecture (x86 o x64):\n"
#        "\ttoolpy -d name -a x64\n"
        
#    )
#    return(0)



def main():
    parser = argparse.ArgumentParser(description="Download various tools.")
    parser.add_argument("-d", "--download", help="Specify the tool or category to download, e.g: toolpy -d ad, toolpy -d rubeus")
    parser.add_argument("-s", "--system", required=False, choices=["windows", "linux"], help="Specify the system (platform) for the tool.")
    parser.add_argument("-a", "--arch", required=False, choices=["x86", "x64"], help="Specify the architecture for the tool.")
    parser.add_argument("-t", "--tools", nargs='?', const=True, help="Show categories or tools in a specific category, e.g: toolpy -t, toolpy -t privescwin")
    #parser.add_argument('-e', '--examples', help=examples())

    args = parser.parse_args()
    # Mostrar categorías o herramientas si se pasa la opción -t
    
    if args.tools is not None:
        if args.tools is True:
            mostrar_ayuda()
        else:
            mostrar_ayuda(args.tools)
        return

    # Continuar con la lógica de descarga de herramientas
    system = args.system or platform.system().lower()
    arch = args.arch or ("x64" if platform.machine().endswith("64") else "x86")

    if args.download:
        match args.download:
            case "privesc":
                privesc(arch)
            case "adcs":
                adcs()
            case "sccm":
                sccm()
            case "windows":
                windows(arch, system)
            case "adrecon":
                adrecon(system, arch)
            case "ad":
                ad(system, arch)
            case "privescwin":
                privesc("windows", arch)
            case "privesclin":
                privesc("linux", arch)
            case "pivoting":
                pivoting(system, arch)
            case "post":
                postexploitation(system, arch)
            case "mimikatz":
                download_mimikatz(arch)
            case "kerbrute":
                download_kerbrute(system, arch)
            case "impacket":
                download_impacket(system, arch)
            case "suggester":
                download_windows_exploit_suggester(system, arch)
            case "suggester2":
                download_linux_exploit_suggester2(system, arch)
            case "checker":
                download_linuxprivchecker(system, arch)
            case "linenum":
                download_linenum(system, arch)
            case "pywerview":
                download_pywerview()
            case "rpcenum":
                download_rpcenum()
            case "socat":
                download_socat(system, arch)
            case "dnstools":
                download_dnstools()
            case "sprying":
                download_sprying()
            case "pkinit":
                download_pkinit()
            case "adcskiller":
                download_adcskiller()
            case "sccme_hunter":
                sccme_hunter(system, arch)
            case "maz_windows_binaries":
                download_maz_windows_binaries(system, arch)
            case "sysinternals":
                download_sysinternals()
            case "sharpcollection":
                download_sharpcollection()
            case "nc_exe":
                download_nc_exe(system, arch)
            case "powersharppack":
                download_powersharppack()
            case "powerupsql":
                download_powerupsql()
            case "invoke_psexec":
                download_invoke_psexec()
            case "invoke_conptyshell":
                download_invoke_conptyshell()
            case "conptyshell_exe":
                download_conptyshell_exe()
            case "powercat":
                download_powercat()
            case "nishang":
                download_nishang()
            case "invoke_thehash":
                download_invoke_thehash()
            case "jaws_enum":
                download_jaws_enum()
            case "powerless":
                download_powerless()
            case "sherlock":
                download_sherlock()
            case "privesccheck":
                download_privesccheck()
            case "powerup":
                download_powerup()
            case "kekeo":
                download_kekeo()
            case "lazagne":
                download_lazagne()
            case "adpeas":
                download_adpeas()
            case "adpeas-light":
                download_adpeas_light()
            case "sharpview":
                download_sharpview()
            case "powerview":
                download_powerview()
            case "sharphound":
                download_sharphound()
            case "password_spray":
                download_domain_password_spray()
            case "ligolo":
                download_ligolo(system, arch)
            case "poshadcs":
                download_adcs()
            case "adcspwn":
                download_adcspwn()
            case "powersccm":
                download_powersccm()
            case "sharpsccm":
                download_sharpsccm()
            case "sharpwmi":
                download_sharpwmi()
            case "sharpup":
                download_sharpup()
            case "rubeus":
                download_rubeus()
            case "certiy":
                download_certify()
            case "recon":
                download_recon()
            case "peas":
                download_peas(platform, arch)
            case "seatbelt":
                download_seatbelt()
            case "runascs":
                download_runascs()
            case "runasps1":
                download_runasps1()
            case "certipy":
                download_certipy()
            case "lse":
                download_lse()
            case "bashark":
                download_bashark()
            case "private":
                download_private()
            case "htbenum":
                download_htbenum()
            case "suggester":
                download_linux_exploit_suggester()
            case "moriarty":
                download_moriarty()
            case"standin":
                download_standin()
            case _:
                print(f"[!] La herramienta '{tool_name}' no está reconocida.")

    else:
        parser.print_help()

# subprocess.run(["wget",""], check=True)


if __name__ == "__main__":
    main()
    sys.exit(0)
